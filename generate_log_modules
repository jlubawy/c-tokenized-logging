#!/usr/bin/env python

import csv
import re
import sys

from optparse import OptionParser
from os import path

LOG_MODULE_PATTERN = "LOG_MODULE_DEFINE\((.*)\);"
LOG_STRING_PATTERN = "^\s*LOG_(?:VAR_)*(?:INFO|WARNING|ERROR){1}\(\s+\"(.*?)\""

LOG_MODULES_HEADER = """/* DO NOT MODIFY - AUTO-GENERATED */
#ifndef LOG_MODULES_H
#define LOG_MODULES_H

/* Log module definitions */
"""

LOG_MODULES_FOOTER = """
#endif
"""

def parser_error(filename, line, msg):
    print "Error: In '%s' line %d" % (filename, line)
    print "       %s" % (msg)
    sys.exit(1)


def parse_module(filename):
    module = {
        'name': '',
        'fmt_strs': []
    }

    if not path.isfile(filename):
        return None

    root, ext = path.splitext(filename)
    if ext != '.c':
        return None

    expected_name = path.basename(root)

    line_num = 1
    with open(filename, 'r') as f:
        for line in f:
            # Look for module definitions
            m = re.match(LOG_MODULE_PATTERN, line)
            if m is not None:
                if module['name'] != '':
                    parser_error(filename, line_num, "Found multiple module definitions in '%s'" % (filename))

                if len(m.groups()) != 1:
                    parser_error(filename, line_num, "Module regex error")

                module['name'] = m.groups()[0].strip()
                if module['name'] != expected_name:
                    parser_error(filename, line_num, "Expected module '%s' but got '%s'" % (expected_name, module['name'], filename))

            # Look for log strings
            m = re.match(LOG_STRING_PATTERN, line)
            if m is not None:
                if len(m.groups()) != 1:
                    parser_error(filename, line_num, "Format string regex error")

                else:
                    fmt_str = m.groups()[0]
                    if "\\\"" in line:
                        parser_error(filename, line_num, "Format string cannot contain escaped double-quotes")

                module['fmt_strs'].append((line_num, fmt_str))

            line_num += 1

    if module['name'] == '':
        return None
    else:
        return module


def walker(modules, dirname, names):
    for name in names:
        filename = path.join(dirname, name)

        module = parse_module(filename)
        if module is not None:
            name = module['name']
            fmt_strs = module['fmt_strs']

            if len(fmt_strs) == 0:
                    print "Error: No format strings found in '%s'" % (filename)
                    sys.exit(1)

            for m in modules:
                if name == m['name']:
                    print "Error: Module name '%s' was found more than once" % (name)
                    sys.exit(1)

            modules.append(module)


def main(parser):
    # Parse options and arguments
    options, args = parser.parse_args()

    if len(args) != 1:
        print "Must specify search path for C source files.\n"
        parser.print_help()
        sys.exit(1)

    # Gather the C source file modules
    modules = []
    path.walk(args[0], walker, modules)
    modules = sorted(modules, key=lambda k:k['name'])

    # If no modules/source files were found then exit with error
    if len(modules) == 0:
        print "Error: No C source files found."
        sys.exit(1)

    # Create log modules header and log string CSV filesimport csv
    csvFile = sys.stdout if options.csvFilename == '-' else open(options.csvFilename, 'wb')
    csvWriter = csv.DictWriter(csvFile, quoting=csv.QUOTE_MINIMAL, fieldnames=['log_module', 'line', 'str'])
    csvWriter.writeheader()

    headerFile = sys.stdout if options.headerFilename == '-' else open(options.headerFilename, 'wb')
    headerFile.write(LOG_MODULES_HEADER)

    n = 0
    for module in modules:
        name = module['name']
        fmt_strs = module['fmt_strs']

        for fmt_str in fmt_strs:
            csvWriter.writerow({
                'log_module': n,
                'line': fmt_str[0],
                'str': fmt_str[1]
            })

        headerFile.write("#define LOG_MODULE_%-32s  (%d)\n" % (name, n))

        n += 1

    headerFile.write(LOG_MODULES_FOOTER)
    headerFile.close()

    csvFile.close()


if __name__ == "__main__":
    parser = OptionParser("usage: %prog [OPTIONS] <search path>")
    parser.add_option("--csv",    dest="csvFilename",    help="write generated log strings CSV to FILE",    metavar="FILE", default="-")
    parser.add_option("--header", dest="headerFilename", help="write generated log modules header to FILE", metavar="FILE", default="-")

    main(parser)
